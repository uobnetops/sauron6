#!/usr/bin/perl -I/usr/local/sauron
#
# import-dhcp - imports ISC DHCPD configuration
#
# Copyright (c) Timo Kokkonen <tjko@iki.fi>  2002,2003.
# $Id: import-dhcp,v 1.12 2003/12/28 19:29:12 tjko Exp $
#
require 5;
use Net::Netmask;
use Getopt::Long;
use Sauron::DB;
use Sauron::Util;
use Sauron::UtilDhcp;
use Sauron::BackEnd;
use Sauron::Sauron;
use Data::Dumper;

load_config();

##############################

GetOptions("help|h","verbose|v","dir=s","notransaction","chaosnet=s",
	   "global");

if ($opt_help || @ARGV < 2) {
    print "syntax: $0 [options] <servername> <dhcpd.conf file>\n";
    print "options:\n",
          "\t--dir=<directory>\tdirectory where included files are located\n",
	  "\t\t\t\t(if not in directory specified in dhcpd.conf)\n",
	  "\t--chaosnet=<name>\ttreat this shared-network as default VLAN\n",
	  "\t\t\t\t(default is \"CHAOS\")\n",
	  "\t--global\t\timport 'global' entires into server settings\n",
	  "\t--verbose\t\tdisplay more detailed progress reports\n",
	  "\t--help\t\t\tdisplay this help\n\n";
    print "" if ($opt_help);
    exit(1);
}

$opt_verbose = ($opt_verbose ? 1 : 0);
$opt_global = ($opt_global ? 1 : 0);
$servername = $ARGV[0];
$dhcpdf = $ARGV[1];
$user = (getpwuid($<))[0];
$chaosnet = ($opt_chaosnet ? $opt_chaosnet : 'CHAOS');

fatal("cannot read dhcpd.conf ($dhcpdf)") unless (-r $dhcpdf);

set_muser($user);
db_connect();

$serverid=get_server_id($servername);
fatal("cannot find server: $servername") unless ($serverid > 0);

if ($dhcpdf =~ /(^.*\/)/) {
    $dir=$1;
} else {
    $dir="./";
}

# parse named.conf
undef %data;
process_dhcpdconf($dhcpdf,\%data);

print Dumper (\%data);
exit;

unless ($opt_notransaction) {
  db_begin();
  db_ignore_begin_and_commit(1);
}

# global entries
if ($opt_global) {
  fatal("cannot get server record") if (get_server($serverid,\%server) < 0);

  foreach $line (@{$data{GLOBAL}}) {
    next unless $line =~ /;\s*$/;
    $line =~ s/;\s*//;
    print "GLOBAL: $line\n" if ($opt_verbose);
    push @{$server{dhcp}}, [0,$line,'',2];
  }

  fatal("cannot update server record") if (update_server(\%server) < 0);
}

# VLANs (shared-networks)

$c = keys %{$data{'shared-network'}};
print "Found $c shared-networks (VLANs)\n";

foreach $key (sort keys %{$data{'shared-network'}}) {
  $rec=$data{'shared-network'}->{$key};
  ($net = $key) =~  s/^\"|\"$//g;
  $vlancounter++;
  $name = (valid_texthandle($net) ? $net : "vlan-$vlancounter");
  print "shared-network($vlancounter):  $net ($name)\n" if ($opt_verbose);

  if ($net eq $chaosnet) {
    $vlans{$key}=-1;
    print "Treating shared-network $net as default VLAN\n";
    next;
  }

  undef @q;
  foreach $line (@{$rec}) {
    next unless ($line =~ /;\s*$/);
    $line =~ s/;\s*$//;
    push @q, [0,$line];
  }

  $res = add_vlan({server=>$serverid,name=>$name,description=>$net,
		   dhcp_l=>\@q});
  fatal("cannot add VLAN ($net) ".db_errormsg()) if ($res < 0);
  $vlans{$key}=$res;
}


# networks (subnets)...

$c = keys %{$data{'subnet'}};
print "Found $c subnets (nets)\n";

foreach $key (sort keys %{$data{subnet}}) {
  $rec = $data{subnet}->{$key};
  unless (($net,$mask) = ($key =~ /^(\S+)\s+netmask\s+(\S+)\s*$/)) {
    print "Skipping invalid subnet: $key\n";
    next;
  }

  $nh = new2 Net::Netmask($net,$mask);
  fatal("invalid subnet: $key") unless ($nh);
  $cidr=$nh->desc();
  $netcounter++;
  $name="net-$netcounter";

  undef @q;
  $id=-1;
  foreach $line (@{$rec}) {
    if ($line =~ /^VLAN\s+(\".*\"|\S+)\s*$/) {
      $vlanname=$1;
      fatal("cannot find id for VLAN: $vlanname (bug!)")
	unless (defined $vlans{$vlanname});
      $id =$vlans{$vlanname};
      next;
    }
    next unless ($line =~ /;\s*$/);
    $line =~ s/;\s*$//;
    if ($line =~ /^\s*option\s+routers\s+(\S+)\s*$/) {
      $routerip=$1;
      print "router interface: $routerip\n" if ($opt_verbose);
      $routers{$routerip}=-1;
    } else {
      push @q, [0,$line];
    }
  }

  print "net: $cidr ($name) (vlan id=$id)\n" if ($opt_verbose);
  $res = add_net({server=>$serverid,netname=>$name,name=>$name,
		  net=>$cidr,subnet=>'true',vlan=>$id, dhcp_l=>\@q});
  fatal("cannot add NET ($key)") if ($res < 0);
}


# groups

$c = keys %{$data{'group'}};
print "Found $c groups\n";

foreach $key (sort keys %{$data{group}}) {
  $rec = $data{group}->{$key};
  print "group: $key\n" if ($opt_verbose);

  undef @q;
  foreach $line (@{$rec}) {
    next unless ($line =~ /;\s*$/);
    $line =~ s/;\s*$//;
    push @q, [0,$line,''];
  }

  $res = add_group({server=>$serverid,name=>$key,type=>1,dhcp=>\@q});
  fatal("cannot add GROUP ($key)") if ($res < 0);
  $groups{$key}=$res;
}

# dhcp class

$c = keys %{$data{'class'}};
print "Found $c classes\n";

foreach $key (sort keys %{$data{class}}) {
  $rec = $data{class}->{$key};
  print "class: $key\n" if ($opt_verbose);

  undef @q;
  foreach $line (@{$rec}) {
    next unless ($line =~ /;\s*$/);
    $line =~ s/;\s*$//;
    push @q, [0,$line,''];
  }

  $res = add_group({server=>$serverid,name=>$key,type=>3,dhcp=>\@q});
  fatal("cannot add CLASS ($key)") if ($res < 0);
  $classes{$key}=$res;
}

# dhcp subclass

$c = keys %{$data{'subclass'}};
print "Found $c subclasses\n";

foreach $key (sort keys %{$data{subclass}}) {
  $rec = $data{subclass}->{$key};
  print "subclass: $key\n" if ($opt_verbose);

  undef @q;
  foreach $line (@{$rec}) {
    next unless ($line =~ /;\s*$/);
    #UWB ~ match pick-first-value (option dhcp-client-identifier, hardware) 
    # 1:00:11:22:33:44:55 = hardware ethernet 11:22:33:44:55:66;  FIXIT;-)
    $line =~ s/^1://;   
    $line =~ s/;\s*$//;
    $sclass2class{$line} = ($classes{$key} ? $classes{$key} : -1);
  }
}


# hosts

$c = keys %{$data{'host'}};
print "Found $c hosts\n";

foreach $key (keys %{$data{host}}) {
  $rec = $data{host}->{$key};

  $id=-1; $ip=''; $ether='';
  undef @q;

  foreach $line (@{$rec}) {
    if ($line =~ /^GROUP\s+(\S+)\s*$/) {
      $id=$groups{$1};
      unless ($id > 0) {
	warn("cannot find group id for: $line ($1)");
	$id=-1;
      }
      next;
    }
    next unless ($line =~ /;\s*$/);
    $line =~ s/;\s*$//;
    next if ($line =~ /^\s*option\s+domain-name\s+/);
    if ($line =~ /^\s*fixed\-address\s+(\S.*)\s*$/) {
      $tmp =$1;
      if ($tmp =~ /^\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*$/) {
	$ip=$1;
      } else {
	print "Ignoring host with multiple IPs: $key\n";
	next;
      }
    }
    elsif ($line =~ /^\s*hardware\s+ethernet\s+(([0-9a-fA-F]{1,2}(:|\b)){6})\s*$/) {
      my @tmp = split(/:/, $1);
      my $mac = "";
      foreach $byte (@tmp){ $mac .= sprintf ("%02s", $byte); }
      $ether=uc($mac);
    } else {
      push @q, $line;
    }

  }
  next unless ($ip && $ether);
  print "host: $key ip=$ip,ether=$ether,groupid=$id\n" if ($opt_verbose);
  $hosts{$ip}=[$ether,$id,$key];
}


print "Querying database...";
undef @list;
db_query("SELECT h.id,h.domain,a.ip FROM hosts h,zones z, a_entries a " .
	 "WHERE z.server=$serverid AND h.zone=z.id AND h.type=1 " .
	 " AND a.host=h.id ORDER BY a.ip",\@list);
print "found ",int(@list)," hosts\n";

if (@list > 0) {
  for $i (0..$#list) {
    next if ($skiplist{$list[$i][2]});
    $routers{$list[$i][2]}=$i if ($routers{$list[$i][2]}< 0);
    next unless ($hosts{$list[$i][2]});
    if ($list[$i][2] eq $list[$i-1][2] || $list[$i][2] eq $list[$i+1][2]) {
      $matchcount++;
      $hostrefs{$list[$i][2]}=$i;
      $skiplist{$list[$i][2]}=1;
      next;
    }
    $matchcount++;
    $hostrefs{$list[$i][2]}=$i;
  }
}

print "Found $matchcount hosts in database to update\n";

print "Updating hosts...\n";

db_query("SELECT h.ether, h.id from hosts h, zones z " .
         "WHERE z.server=$serverid AND h.zone=z.id AND h.type=1 " .
         "AND h.ether!=\'\'", \@current_ethers);

if (@current_ethers > 0) {
  for $i (0..$#current_ethers) {
    $macs{$current_ethers[$i][0]} = $current_ethers[$i][1];
  }
}

foreach $ip (keys %hostrefs) {
  next unless defined ($hostrefs{$ip});
  $i=$hostrefs{$ip};
  $id=$list[$i][0];
  $domain=$list[$i][1];
  $ip=$list[$i][2];

  if ($macs{$hosts{$ip}[0]}){
    print "duplicate found, $hosts{$ip}[0]\n" if ($opt_verbose);
    print "Updating $domain ($ip,$id) <-- ",
          "$macs{$hosts{$ip}[0]},$hosts{$ip}[1],$hosts{$ip}[2]\n"
	    if ($opt_verbose);
    $res = update_host({id=>$id,ether_alias=>$macs{$hosts{$ip}[0]},
			grp=>$hosts{$ip}[1]});
    fatal("cannot update host: $domain ($res)\n".db_errormsg()) if ($res < 0);
    next;
  }
  $macs{$hosts{$ip}[0]} = $id;

  print "Updating $domain ($ip,$id) <-- ",
        "$hosts{$ip}[0],$hosts{$ip}[1],$hosts{$ip}[2]\n" if ($opt_verbose);
  $res = update_host({id=>$id,ether=>$hosts{$ip}[0],grp=>$hosts{$ip}[1]});
  fatal("cannot update host: $domain ($res)\n".db_errormsg()) if ($res < 0);
}


print "Updating routers...\n";
foreach $ip (keys %routers) {
  next if ($routers{$ip} < 0);
  $i=$routers{$ip};
  $id=$list[$i][0];
  $domain=$list[$i][1];
  print "router interface: $ip $domain (id=$id)\n" if ($opt_verbose);
  fatal("cannot update router info for: $domain ($ip)")
    if (update_host({id=>$id,router=>1}) < 0);
}


unless ($opt_notransaction) {
  db_ignore_begin_and_commit(0);
  fatal("Cannot commit import to database!") if (db_commit() < 0);
}


print "All done.\n";
exit(0);

# eof
